<?php

/**
 * RTG-Portal
 * The RTG-Portal API is an interface for selected RTG-Shop customers.
 *
 * Laravel version 9.48.x
 * PHP version 8.2.x
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: fabian.kaufmann@picard.de
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel-9/
 */


namespace PicardFabianKaufmann\RtgServerStub\Apis;

use Illuminate\Support\Facades\Request;
use App\Http\Controllers\Controller;


class InfrastructuralApi extends Controller
{
    /**
     * Operation checkConnection
     *
     * checkConnection.
     * [TestConnectionResponse, DataTokenInvalidErrorResponse, ShoptokenPermissionErrorResponse, ShoptokenInvalidErrorResponse]
     *
     * @param string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @return PicardFabianKaufmann\RtgServerStub\Models\TestConnectionResponse|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse
     */
    public function checkConnection(string $stockListToken): PicardFabianKaufmann\RtgServerStub\Models\TestConnectionResponse|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse
    {
        $validatedInputs = Request::validator([
            'stockListToken' => [
                'string', 'required',
            ],
        ]);



        return response('How about implementing checkConnection as a GET method ?');
    }
    /**
     * Operation getCarriers
     *
     * getCarriers.
     * [SuccessResponse, DefaultFilterRequestBody, ShoptokenInvalidErrorResponse]
     *
     * @return PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultFilterRequestBody|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse
     */
    public function getCarriers(): PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultFilterRequestBody|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse
    {
        $validatedInputs = Request::validator([
            'defaultFilterRequestBody' => [
                    // DANN HIER DAS MODEL VERSUCHEN ANZUGEGBEN ... NUR WIE???
                'DefaultFilterRequestBody',
            ],
        ]);



        return response('How about implementing getCarriers as a GET method ?');
    }
    /**
     * Operation getLanguages
     *
     * getLanguages.
     * [SuccessResponse, DefaultFilterRequestBody, ShoptokenInvalidErrorResponse]
     *
     * @return PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultFilterRequestBody|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse
     */
    public function getLanguages(): PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultFilterRequestBody|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse
    {
        $validatedInputs = Request::validator([
            'defaultFilterRequestBody' => [
                    // DANN HIER DAS MODEL VERSUCHEN ANZUGEGBEN ... NUR WIE???
                'DefaultFilterRequestBody',
            ],
        ]);



        return response('How about implementing getLanguages as a GET method ?');
    }
    /**
     * Operation getOrderStatuscodes
     *
     * getOrderStatuscodes.
     * [SuccessResponse, DefaultFilterRequestBody, ShoptokenInvalidErrorResponse]
     *
     * @return PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultFilterRequestBody|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse
     */
    public function getOrderStatuscodes(): PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultFilterRequestBody|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse
    {
        $validatedInputs = Request::validator([
            'defaultFilterRequestBody' => [
                    // DANN HIER DAS MODEL VERSUCHEN ANZUGEGBEN ... NUR WIE???
                'DefaultFilterRequestBody',
            ],
        ]);



        return response('How about implementing getOrderStatuscodes as a GET method ?');
    }
    /**
     * Operation getProductCategories
     *
     * getProductCategories.
     * [SuccessResponse, DefaultFilterRequestBody, DataTokenInvalidErrorResponse, ShoptokenPermissionErrorResponse, ShoptokenInvalidErrorResponse]
     *
     * @param string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @return PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultFilterRequestBody|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse
     */
    public function getProductCategories(string $stockListToken): PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultFilterRequestBody|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse
    {
        $validatedInputs = Request::validator([
            'stockListToken' => [
                'string', 'required',
            ],
            'defaultFilterRequestBody' => [
                    // DANN HIER DAS MODEL VERSUCHEN ANZUGEGBEN ... NUR WIE???
                'DefaultFilterRequestBody',
            ],
        ]);



        return response('How about implementing getProductCategories as a GET method ?');
    }
    /**
     * Operation getProductManufacturers
     *
     * getProductManufacturers.
     * [SuccessResponse, DefaultFilterRequestBody, DataTokenInvalidErrorResponse, ShoptokenPermissionErrorResponse, ShoptokenInvalidErrorResponse]
     *
     * @param string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @return PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultFilterRequestBody|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse
     */
    public function getProductManufacturers(string $stockListToken): PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultFilterRequestBody|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse
    {
        $validatedInputs = Request::validator([
            'stockListToken' => [
                'string', 'required',
            ],
            'defaultFilterRequestBody' => [
                    // DANN HIER DAS MODEL VERSUCHEN ANZUGEGBEN ... NUR WIE???
                'DefaultFilterRequestBody',
            ],
        ]);



        return response('How about implementing getProductManufacturers as a GET method ?');
    }
    /**
     * Operation updateRequestStatus
     *
     * updateRequestStatus.
     * [ReportRequestStatusResponse, ShoptokenInvalidErrorResponse, integer]
     *
     * @return PicardFabianKaufmann\RtgServerStub\Models\ReportRequestStatusResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\integer
     */
    public function updateRequestStatus(): PicardFabianKaufmann\RtgServerStub\Models\ReportRequestStatusResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\integer
    {
        $validatedInputs = Request::validator([
            'requestId' => [
                'int', 'required',
            ],
            'status' => [
                'string', 'required',
                'in:'.implode(',', json_decode('{
  "name" : "status",
  "in" : "query",
  "description" : "status of request",
  "required" : true,
  "style" : "form",
  "explode" : true,
  "schema" : {
    "type" : "string",
    "enum" : [ "still running", "success", "fail" ]
  }
}', true)['schema']['enum']),
            ],
            'errorText' => [
                'string', 'required',
            ],
        ]);



        return response('How about implementing updateRequestStatus as a PUT method ?');
    }
}
