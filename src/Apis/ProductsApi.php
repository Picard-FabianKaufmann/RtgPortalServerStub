<?php

/**
 * RTG-Portal
 * The RTG-Portal API is an interface for selected RTG-Shop customers.
 *
 * Laravel version 9.48.x
 * PHP version 8.2.x
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: fabian.kaufmann@picard.de
 *
 * NOTE: This class is auto generated by OpenAPI-Generator
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 * Source files are located at:
 *
 * > https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/resources/php-laravel-9/
 */


namespace PicardFabianKaufmann\RtgServerStub\Apis;

use Illuminate\Support\Facades\Request;
use App\Http\Controllers\Controller;


class ProductsApi extends Controller
{
    /**
     * Operation getImage
     *
     * getImage.
     * [ProductImageFileNotFoundErrorResponse, file, ShoptokenInvalidErrorResponse]
     *
     * @param string $imagename Filename of image (required)
     * @return PicardFabianKaufmann\RtgServerStub\Models\ProductImageFileNotFoundErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\file|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse
     */
    public function getImage(string $imagename): PicardFabianKaufmann\RtgServerStub\Models\ProductImageFileNotFoundErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\file|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse
    {
        $validatedInputs = Request::validator([
            'imagename' => [
                'string', 'required',
            ],
        ]);



        return response('How about implementing getImage as a GET method ?');
    }
    /**
     * Operation getImages
     *
     * getImages.
     * [ProductImageFileNotFoundErrorResponse, SuccessResponse, ShoptokenInvalidErrorResponse]
     *
     * @param string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @return PicardFabianKaufmann\RtgServerStub\Models\ProductImageFileNotFoundErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse
     */
    public function getImages(string $stockListToken): PicardFabianKaufmann\RtgServerStub\Models\ProductImageFileNotFoundErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse
    {
        $validatedInputs = Request::validator([
            'stockListToken' => [
                'string', 'required',
            ],
            'imagesLeft_Square_BracketRight_Square_Bracket' => [
                'array', 'required',
            ],
        ]);



        return response('How about implementing getImages as a GET method ?');
    }
    /**
     * Operation getLineartechProducts
     *
     * getLineartechProducts.
     * [SuccessResponse, DataTokenInvalidErrorResponse, ShoptokenPermissionErrorResponse, ShoptokenInvalidErrorResponse, ProductNotFoundErrorResponse, RequestBodyValidationErrorResponse, DefaultProductFilterRequestBody]
     *
     * @param string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @return PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ProductNotFoundErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\RequestBodyValidationErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultProductFilterRequestBody
     */
    public function getLineartechProducts(string $stockListToken): PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ProductNotFoundErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\RequestBodyValidationErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultProductFilterRequestBody
    {
        $validatedInputs = Request::validator([
            'stockListToken' => [
                'string', 'required',
            ],
            'defaultProductFilterRequestBody' => [
                    // DANN HIER DAS MODEL VERSUCHEN ANZUGEGBEN ... NUR WIE???
                'DefaultProductFilterRequestBody',
            ],
        ]);



        return response('How about implementing getLineartechProducts as a GET method ?');
    }
    /**
     * Operation getLineartechQuantities
     *
     * getLineartechQuantities.
     * [SuccessResponse, DataTokenInvalidErrorResponse, ShoptokenPermissionErrorResponse, ShoptokenInvalidErrorResponse, ProductNotFoundErrorResponse, RequestBodyValidationErrorResponse, DefaultProductFilterRequestBody]
     *
     * @param string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @return PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ProductNotFoundErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\RequestBodyValidationErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultProductFilterRequestBody
     */
    public function getLineartechQuantities(string $stockListToken): PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ProductNotFoundErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\RequestBodyValidationErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultProductFilterRequestBody
    {
        $validatedInputs = Request::validator([
            'stockListToken' => [
                'string', 'required',
            ],
            'defaultProductFilterRequestBody' => [
                    // DANN HIER DAS MODEL VERSUCHEN ANZUGEGBEN ... NUR WIE???
                'DefaultProductFilterRequestBody',
            ],
        ]);



        return response('How about implementing getLineartechQuantities as a GET method ?');
    }
    /**
     * Operation getPrices
     *
     * getPrices.
     * [SuccessResponse, DataTokenInvalidErrorResponse, ShoptokenPermissionErrorResponse, ShoptokenInvalidErrorResponse, ProductNotFoundErrorResponse, RequestBodyValidationErrorResponse, DefaultProductFilterRequestBody]
     *
     * @param string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @return PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ProductNotFoundErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\RequestBodyValidationErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultProductFilterRequestBody
     */
    public function getPrices(string $stockListToken): PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ProductNotFoundErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\RequestBodyValidationErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultProductFilterRequestBody
    {
        $validatedInputs = Request::validator([
            'stockListToken' => [
                'string', 'required',
            ],
            'defaultProductFilterRequestBody' => [
                    // DANN HIER DAS MODEL VERSUCHEN ANZUGEGBEN ... NUR WIE???
                'DefaultProductFilterRequestBody',
            ],
        ]);



        return response('How about implementing getPrices as a GET method ?');
    }
    /**
     * Operation getProductAttributeKeys
     *
     * getProductAttributeKeys.
     * [SuccessResponse, DataTokenInvalidErrorResponse, ShoptokenPermissionErrorResponse, ShoptokenInvalidErrorResponse, ProductNotFoundErrorResponse, RequestBodyValidationErrorResponse, DefaultProductFilterRequestBody]
     *
     * @param string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @return PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ProductNotFoundErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\RequestBodyValidationErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultProductFilterRequestBody
     */
    public function getProductAttributeKeys(string $stockListToken): PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ProductNotFoundErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\RequestBodyValidationErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultProductFilterRequestBody
    {
        $validatedInputs = Request::validator([
            'stockListToken' => [
                'string', 'required',
            ],
            'defaultProductFilterRequestBody' => [
                    // DANN HIER DAS MODEL VERSUCHEN ANZUGEGBEN ... NUR WIE???
                'DefaultProductFilterRequestBody',
            ],
        ]);



        return response('How about implementing getProductAttributeKeys as a GET method ?');
    }
    /**
     * Operation getProductAttributeValues
     *
     * getProductAttributeValues.
     * [SuccessResponse, DataTokenInvalidErrorResponse, ShoptokenPermissionErrorResponse, ShoptokenInvalidErrorResponse, ProductNotFoundErrorResponse, RequestBodyValidationErrorResponse, DefaultProductFilterRequestBody]
     *
     * @param string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @return PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ProductNotFoundErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\RequestBodyValidationErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultProductFilterRequestBody
     */
    public function getProductAttributeValues(string $stockListToken): PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ProductNotFoundErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\RequestBodyValidationErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultProductFilterRequestBody
    {
        $validatedInputs = Request::validator([
            'stockListToken' => [
                'string', 'required',
            ],
            'defaultProductFilterRequestBody' => [
                    // DANN HIER DAS MODEL VERSUCHEN ANZUGEGBEN ... NUR WIE???
                'DefaultProductFilterRequestBody',
            ],
        ]);



        return response('How about implementing getProductAttributeValues as a GET method ?');
    }
    /**
     * Operation getProducts
     *
     * getProducts.
     * [SuccessResponse, ProductsRequestBody, DataTokenInvalidErrorResponse, ShoptokenPermissionErrorResponse, ShoptokenInvalidErrorResponse, ProductNotFoundErrorResponse, RequestBodyValidationErrorResponse]
     *
     * @param string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @return PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\ProductsRequestBody|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ProductNotFoundErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\RequestBodyValidationErrorResponse
     */
    public function getProducts(string $stockListToken): PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\ProductsRequestBody|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ProductNotFoundErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\RequestBodyValidationErrorResponse
    {
        $validatedInputs = Request::validator([
            'stockListToken' => [
                'string', 'required',
            ],
            'productsRequestBody' => [
                    // DANN HIER DAS MODEL VERSUCHEN ANZUGEGBEN ... NUR WIE???
                'ProductsRequestBody',
            ],
        ]);



        return response('How about implementing getProducts as a GET method ?');
    }
    /**
     * Operation getQuantities
     *
     * getQuantities.
     * [SuccessResponse, DataTokenInvalidErrorResponse, ShoptokenPermissionErrorResponse, ShoptokenInvalidErrorResponse, ProductNotFoundErrorResponse, RequestBodyValidationErrorResponse, DefaultProductFilterRequestBody]
     *
     * @param string $stockListToken Stocklist identifier, add in RTG-Portal [Stocklist » add](https://rtg-portal.picard.de/stocklists/create) (required)
     * @return PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ProductNotFoundErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\RequestBodyValidationErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultProductFilterRequestBody
     */
    public function getQuantities(string $stockListToken): PicardFabianKaufmann\RtgServerStub\Models\SuccessResponse|PicardFabianKaufmann\RtgServerStub\Models\DataTokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenPermissionErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ShoptokenInvalidErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\ProductNotFoundErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\RequestBodyValidationErrorResponse|PicardFabianKaufmann\RtgServerStub\Models\DefaultProductFilterRequestBody
    {
        $validatedInputs = Request::validator([
            'stockListToken' => [
                'string', 'required',
            ],
            'defaultProductFilterRequestBody' => [
                    // DANN HIER DAS MODEL VERSUCHEN ANZUGEGBEN ... NUR WIE???
                'DefaultProductFilterRequestBody',
            ],
        ]);



        return response('How about implementing getQuantities as a GET method ?');
    }
}
